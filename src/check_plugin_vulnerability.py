#!/usr/bin/env python
"""InnoGames Monitoring Plugins - Jenkins Plugin security check

This scripts checks the Jenkins Plugins for security issues in combination
with a groovy script.

Copyright (c) 2019 InnoGames GmbH
"""
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


import argparse
import requests
from sys import exit
from requests import HTTPError


def main():
    """Return the response of a given endpoint in Nagios format.

    Use token-authentication if CSFR-protection is enabled.

    :return:
    """

    args = parse_cmd_args()
    username = args.username
    password = args.password

    url = 'https://{}/scriptText'.format(args.host)
    head = {}

    with open('/usr/lib/nagios/igmonplugins/plugin_vulnerability.groovy', 'r') \
            as script:
        data = script.read()

    try:
        post_script_data(url, data, head).raise_for_status()
        post_response = post_script_data(url, data, head).text

        if post_response[0] == '0':
            print('OK - No Issues found')
            exit(0)
        else:
            print('Critical - Issues found for: {}'.format(post_response))
            exit(1)

    except HTTPError:
        req = requests.get(
            'https://{}/crumbIssuer/api/xml?xpath='
            'concat(//crumbRequestField,":",//crumb)'.
            format(args.host), auth=(username, password))

        crumb = req.text.split(':')
        head[crumb[0]] = crumb[1]
        post_response = post_script_data(url, data, head).text
        if post_response[0] == '0':
            print('OK - No Issues found')
            exit(0)
        else:
            print('Critical - Issues found for: {}'.format(post_response))
            exit(1)


def post_script_data(url, data, head):
    """Send script data to a given endpoint

    :param: url: url of the target
    :param; data: data wich will be send within the post
    :param: head: needed headers for the post

    :return: str
    """

    args = parse_cmd_args()
    username = args.username
    password = args.password

    response = requests.post(url, auth=(username, password),
                             data={'script': data}, headers=head)

    return response


def parse_cmd_args():
    """parse arguments

    :return: str
    """

    parser = argparse.ArgumentParser(
        description='A small Nagios script to check'
                    'for security vulnerabilities in'
                    'Jenkins Plugins'
    )
    parser.add_argument('username', type=str)
    parser.add_argument('password', type=str)
    parser.add_argument('host', type=str)

    return parser.parse_args()


if __name__ == '__main__':
    main()
